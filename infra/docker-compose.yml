version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks: [ playcure ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: ..
      dockerfile: services/backend/Dockerfile
      platforms:
        - linux/amd64
    depends_on: [ ai-service ]
    environment:
      - JAVA_OPTS=-Xms256m -Xmx512m
      - GRPC_AI_SERVICE_HOST=ai-service
      - GRPC_AI_SERVICE_PORT=9090
    ports:
      - "8080:8080"
    networks: [ playcure ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ai-service:
    build:
      context: ..
      dockerfile: services/ai-service/Dockerfile
    environment:
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - GIGACHAT_API_KEY=${GIGACHAT_API_KEY:-}
      - GRPC_PORT=9090
      - HTTP_PORT=8000
    ports:
      - "8000:8000"  # FastAPI health/metrics
      - "9090:9090"  # gRPC
    networks: [ playcure ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  game_recommender_ai_db:
    container_name: game_recommender_postgres
    image: postgres:17.4
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: game_recommender_ai_db
    ports:
      - "5433:5432"
    volumes:
      - game_recommender_ai_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  playcure:
    driver: bridge

volumes:
  game_recommender_ai_data:
  # Optional: persist data if needed
  # backend-data:
  # ai-service-data:
