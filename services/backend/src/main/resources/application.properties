spring.application.name=game-recommender-ai

# Server configuration
server.port=8080

# Application configuration
application.base.url=${APPLICATION_BASE_URL:http://localhost:${server.port}}

# gRPC Configuration
grpc.ai-service.host=${GRPC_AI_SERVICE_HOST:localhost}
grpc.ai-service.port=${GRPC_AI_SERVICE_PORT:9090}

# Security configuration
application.security.cookie.refresh-token.name=${REFRESH_TOKEN_COOKIE_NAME:refreshToken}
application.security.cookie.max-age-in-seconds=${COOKIE_MAX_AGE:3600}

# gRPC Client Configuration (Spring Boot Starters)
grpc.client.ai-service.address=${grpc.ai-service.host}:${grpc.ai-service.port}
grpc.client.ai-service.negotiationType=plaintext
grpc.client.ai-service.maxInboundMessageSize=1048576

# Security
security.jwt.secret=${JWT_SECRET:your-jwt-secret-i-dont-remember-how-long-it-should-be-but-this-should-be-long-enough}
security.token.guest-access.expiration.minutes=60

# Rate limiting
performance.rate-limiter.role.limit.of-hour.GUEST_USER=5
performance.rate-limiter.role.limit.of-hour.SIMPLE_USER=30

# Cache settings
spring.cache.cache-names[0]=rate-limit-buckets
spring.cache.cache-names[1]=filter-config-cache
spring.cache.caffeine.spec=maximumSize=10000,expireAfterAccess=3600s

# Bucket4j settings
bucket4j.enabled=true
bucket4j.filter-config-caching-enabled=true
bucket4j.filter-config-cache-name=filter-config-cache
bucket4j.default-http-response-body={"error": "Rate limit exceeded", "retryAfter": "{retryAfterSeconds}"}

# Settings for guest rate limiting
bucket4j.filters[0].id=guest-rate-limit
bucket4j.filters[0].cache-name=rate-limit-buckets
bucket4j.filters[0].filter-order=-1000
bucket4j.filters[0].url=.*
bucket4j.filters[0].strategy=first
bucket4j.filters[0].metrics.enabled=true
bucket4j.filters[0].metrics.tags[0].key=IP
bucket4j.filters[0].metrics.tags[0].expression=getRemoteAddr()
bucket4j.filters[0].metrics.tags[1].key=USER_ROLE
bucket4j.filters[0].metrics.tags[1].expression='GUEST'
bucket4j.filters[0].rate-limits[0].execute-condition=@jwtService.jwtTokenIsValid(#request) and @jwtService.extractRole(#request) == 'GUEST_USER'
bucket4j.filters[0].rate-limits[0].cache-key=@bucketUtil.getBucketCacheKey(#request)
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=${performance.rate-limiter.role.limit.of-hour.GUEST_USER:5}
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=hours
bucket4j.filters[0].rate-limits[0].bandwidths[0].refill-speed=interval
bucket4j.filters[0].rate-limits[0].bandwidths[0].id=guest-hourly

# Settings for simple user rate limiting
bucket4j.filters[1].id=simple-user-rate-limit
bucket4j.filters[1].cache-name=rate-limit-buckets
bucket4j.filters[1].filter-order=-1000
bucket4j.filters[1].url=.*
bucket4j.filters[1].strategy=first
bucket4j.filters[1].metrics.enabled=true
bucket4j.filters[1].metrics.tags[0].key=SUBJECT
bucket4j.filters[1].metrics.tags[0].expression=@jwtService.getSubject()
bucket4j.filters[1].metrics.tags[1].key=USER_ROLE
bucket4j.filters[1].metrics.tags[1].expression='SIMPLE_USER'
bucket4j.filters[1].rate-limits[0].execute-condition=@jwtService.jwtTokenIsValid(#request) and @jwtService.extractRole(#request) == 'SIMPLE_USER'
bucket4j.filters[1].rate-limits[0].cache-key=@bucketUtil.getBucketCacheKey(#request)
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=${performance.rate-limiter.role.limit.of-hour.SIMPLE_USER:20}
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=hours
bucket4j.filters[1].rate-limits[0].bandwidths[0].refill-speed=interval
bucket4j.filters[1].rate-limits[0].bandwidths[0].id=simple-user-hourly

# Dev DB
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Swagger/OpenAPI Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.disable-swagger-default-url=true

# Spring Boot Actuator Configuration
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus,env,configprops
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.info.env.enabled=true
management.info.git.enabled=true

# Custom health indicators
management.health.defaults.enabled=true
management.health.diskspace.enabled=true
management.health.db.enabled=true

# Metrics configuration
management.simple.metrics.export.enabled=true
management.metrics.tags.application=${spring.application.name}

# Prometheus configuration
management.prometheus.metrics.export.enabled=true

# Logging
logging.level.ru.perevalov.gamerecommenderai=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.io.grpc=DEBUG

logging.level.io.grpc.internal.ManagedChannelImplBuilder=ERROR
logging.level.io.grpc.internal=ERROR
logging.level.io.grpc.ManagedChannelRegistry=ERROR
logging.level.io.grpc.netty.shaded.io.grpc.netty.Utils=WARN

# Убирает сообщение про ContextStorageOverride
logging.level.io.grpc.Context=ERROR

# Урезаем подробный DEBUG от netty (shaded)
logging.level.io.grpc.netty.shaded.io.grpc.netty=INFO

# Steam login url
steam.openid.endpoint=https://steamcommunity.com/openid/login
